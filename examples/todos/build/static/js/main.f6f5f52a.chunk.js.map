{"version":3,"sources":["actions/index.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["nextTodoId","VisibilityFilters","Link","_ref","active","children","onClick","react_default","a","createElement","disabled","style","marginLeft","connect","state","ownProps","filter","visibilityFilter","dispatch","type","Footer","FilterLink","input","onSubmit","e","text","preventDefault","value","trim","id","ref","node","Todo","completed","textDecoration","TodoList","todos","toggleTodo","map","todo","components_Todo","Object","assign","key","t","Error","getVisibleTodos","App","containers_AddTodo","VisibleTodoList","components_Footer","arguments","length","undefined","action","toConsumableArray","concat","objectSpread","combineReducers","fetch","then","response","json","store","createStore","rootReducer","devToolsEnhancer","render","react_redux_es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f6f5f52a.chunk.js","sourcesContent":["let nextTodoId = 0\r\nexport const addTodo = text => ({\r\n  type: 'ADD_TODO',\r\n  id: nextTodoId++,\r\n  text\r\n})\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: 'SET_VISIBILITY_FILTER',\r\n  filter\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n  type: 'TOGGLE_TODO',\r\n  id\r\n})\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Link = ({ active, children, onClick }) => (\r\n    <button\r\n       onClick={onClick}\r\n       disabled={active}\r\n       style={{\r\n           marginLeft: '4px',\r\n       }}\r\n    >\r\n      {children}\r\n    </button>\r\n)\r\n\r\nLink.propTypes = {\r\n  active: PropTypes.bool.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Link\r\n","import { connect } from 'react-redux'\r\nimport { setVisibilityFilter } from '../actions'\r\nimport Link from '../components/Link'\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  active: ownProps.filter === state.visibilityFilter\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Link)\r\n","import React from 'react'\r\nimport FilterLink from '../containers/FilterLink'\r\nimport { VisibilityFilters } from '../actions'\r\n\r\nconst Footer = () => (\r\n  <div>\r\n    <span>Show: </span>\r\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\r\n      All\r\n    </FilterLink>\r\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\r\n      Active\r\n    </FilterLink>\r\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\r\n      Completed\r\n    </FilterLink>\r\n  </div>\r\n)\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo } from '../actions'\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  let input\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={e => {\r\n        e.preventDefault()\r\n        if (!input.value.trim()) {\r\n          return\r\n        }\r\n        dispatch(addTodo(input.value))\r\n        input.value = ''\r\n      }}>\r\n        <input ref={node => input = node} />\r\n        <button type=\"submit\">\r\n          Add Todo\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect()(AddTodo)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Todo = ({ onClick, completed, text }) => (\r\n  <li\r\n    onClick={onClick}\r\n    style={{\r\n      textDecoration: completed ? 'line-through' : 'none'\r\n    }}\r\n  >\r\n    {text}\r\n  </li>\r\n)\r\n\r\nTodo.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  completed: PropTypes.bool.isRequired,\r\n  text: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, toggleTodo }) => (\r\n  <ul>\r\n    {todos.map(todo =>\r\n      <Todo\r\n        key={todo.id}\r\n        {...todo}\r\n        onClick={() => toggleTodo(todo.id)}\r\n      />\r\n    )}\r\n  </ul>\r\n)\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    completed: PropTypes.bool.isRequired,\r\n    text: PropTypes.string.isRequired\r\n  }).isRequired).isRequired,\r\n  toggleTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList\r\n","import { connect } from 'react-redux'\r\nimport { toggleTodo } from '../actions'\r\nimport TodoList from '../components/TodoList'\r\nimport { VisibilityFilters } from '../actions'\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case VisibilityFilters.SHOW_ALL:\r\n      return todos\r\n    case VisibilityFilters.SHOW_COMPLETED:\r\n      return todos.filter(t => t.completed)\r\n    case VisibilityFilters.SHOW_ACTIVE:\r\n      return todos.filter(t => !t.completed)\r\n    default:\r\n      throw new Error('Unknown filter: ' + filter)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleTodo: id => dispatch(toggleTodo(id))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList)\r\n","import React from 'react'\r\nimport Footer from './Footer'\r\nimport AddTodo from '../containers/AddTodo'\r\nimport VisibleTodoList from '../containers/VisibleTodoList'\r\n\r\nconst App = () => (\r\n  <div>\r\n    <AddTodo />\r\n    <VisibleTodoList />\r\n    <Footer />\r\n  </div>\r\n)\r\n\r\nexport default App\r\n","const todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ]\r\n    case 'TOGGLE_TODO':\r\n      return state.map(todo =>\r\n        (todo.id === action.id)\r\n          ? {...todo, completed: !todo.completed}\r\n          : todo\r\n      )\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default todos\r\n","import { VisibilityFilters } from '../actions'\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default visibilityFilter\r\n","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport visibilityFilter from './visibilityFilter'\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n})\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport App from './components/App'\r\nimport rootReducer from './reducers'\r\nimport { devToolsEnhancer  } from 'redux-devtools-extension'\r\nimport data from \"./database.js\"\r\n\r\n\r\nfetch(\"./database\").then( (response) => {\r\n    response.json().then( (json) => {\r\n\r\n      const store = createStore(rootReducer, json, devToolsEnhancer());\r\n\r\n      render(\r\n        <Provider store={store}>\r\n          <App />\r\n        </Provider>,\r\n        document.getElementById('root')\r\n      )\r\n\r\n\r\n    })\r\n  })\r\n"],"sourceRoot":""}